name: Build-Publish docs to website

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Project profile'
        required: true
        type: string
      version:
        description: 'Project version'
        required: true
        type: string
      semanticVersion:
        description: 'Project semantic version'
        required: false
        type: string
      hashVersion:
        description: 'Project hash commit'
        required: true
        type: string
      sha:
        description: 'SHA commit id'
        required: true
        type: string
      isRelease:
        description: 'Is release'
        default: 'false'
        required: false
        type: string
      antoraBuildDir:
        description: 'Specifics Antora output dir per profile'
        required: false
        type: string
      webdocsRepo:
        description: 'Webdocs repository'
        required: false
        type: string
      webdocsRef:
        description: 'Webdocs repository ref'
        default: 'main'
        required: false
        type: string
      javaVersion:
        description: 'Java version'
        default: '17'
        required: false
        type: string
    secrets:
      githubToken:
        description: 'GitHub Token'
        required: true
      gpgKey:
        description: 'GPG private key'
        required: true
      gpgPassphrase:
        description: 'GPG passphrase'
        required: true
      gpgFingerprint:
        description: 'GPG subkey fingerprint'
        required: false
        
env: 
  JAVA_DIST: 'temurin'

jobs:
  context:
    name: Evaluate Doc context
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate context
        id: context
        shell: bash
        run: |          
          if [[ '${{ inputs.isRelease }}' == 'true' ]]; then
            docBranch="docs/${{ inputs.profile }}/v${{ inputs.version }}"
            docVersion="${{ inputs.version }}"
            commitVersion="${{ inputs.version }}-${{ inputs.hashVersion }}"
          else
            docBranch="docs/main"
            docVersion="main"
            commitVersion="main-${{ inputs.hashVersion }}"
          fi
          docProfile="${{ inputs.profile }}:docs"
          docOutDir="./antora/${{ inputs.profile }}"

          echo docProfile=$docProfile >> $GITHUB_OUTPUT
          echo docBranch=$docBranch >> $GITHUB_OUTPUT
          echo docVersion=$docVersion >> $GITHUB_OUTPUT
          echo docOutDir=$docOutDir >> $GITHUB_OUTPUT
          echo docBuildDir=${{ inputs.antoraBuildDir }} >> $GITHUB_OUTPUT
          echo ciMsg="${{ inputs.profile }} documentation [$commitVersion]" >> $GITHUB_OUTPUT
    outputs:
      docProfile: ${{ needs.context.outputs.docProfile }}
      docBranch: ${{ needs.context.outputs.docBranch }}
      docVersion: ${{ needs.context.outputs.docVersion }}
      docOutDir: ${{ needs.context.outputs.docOutDir }}
      docBuildDir: ${{ needs.context.outputs.docBuildDir }}
      ciMsg: ${{ needs.context.outputs.ciMsg }}

  build:
    name: Build ${{ inputs.profile }} documentation
    runs-on: ubuntu-latest
    needs: context
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}
          token: ${{ secrets.githubToken }}
          fetch-depth: 0
          submodules: 'true'

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: false
          git_push_gpgsign: false
          gpg_private_key: ${{ secrets.gpgKey }}
          passphrase: ${{ secrets.gpgPassphrase }}
          fingerprint: ${{ secrets.gpgFingerprint }}

      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ inputs.javaVersion }}
          cache: 'gradle'

      - name: Build docs
        shell: bash
        run: |
          ./gradlew antoraDoc \
              -Pprofile=${{ needs.context.outputs.docProfile }} \
              -PdocVersion=${{ needs.context.outputs.docVersion }} \
              -Pversion=${{ inputs.version }} \
              -PsemanticVersion=${{ inputs.semanticVersion }} \
              -PbuildHash=${{ inputs.hashVersion }} \
              -PbuildBy="GitHub-Action"

      - name: Sync changes to Git branch [${{ needs.context.outputs.docBranch }}]
        shell: bash
        run: |
          git fetch
          git checkout docs/main
          rm -rf ${{ needs.context.outputs.docOutDir }} \
            && mkdir ${{ needs.context.outputs.docOutDir }} \
            && touch ${{ needs.context.outputs.docOutDir }}/.gitkeep \
            && cp -rf ./${{ needs.context.outputs.docBuildDir }}/* ${{ needs.context.outputs.docOutDir }}
          git add .
          git diff-index --quiet HEAD || git commit -am "Update ${{ needs.context.outputs.ciMsg }}"
          if [[ '${{ inputs.isRelease }}' == 'true' ]]; then
               git tag -sf -am "Release ${{ needs.context.outputs.ciMsg }}" ${{ needs.context.outputs.docBranch }}
          fi
          git push --follow-tags

  deploy-site:
    name: Build and Deploy webdocs
    runs-on: ubuntu-latest
    needs: [ context, build ]
    env:
      PROJECT_NAME: ${{ inputs.profile }}
      PROJECT_REF: gh-pages
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Checkout webdocs
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.webdocsRepo }}
          ref: ${{ inputs.webdocsRef }}
          path: webdocs

      - name: Build webdocs
        shell: bash
        run: |
          cd webdocs
          yarn install
          yarn antora --fetch antora-playbook.yml --stacktrace

      - name: Checkout ${{ env.PROJECT_NAME }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.PROJECT_REF }}
          path: ${{ env.PROJECT_NAME }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: false
          git_push_gpgsign: false
          gpg_private_key: ${{ secrets.gpgKey }}
          passphrase: ${{ secrets.gpgPassphrase }}
          fingerprint: ${{ secrets.gpgFingerprint }}
          workdir: ${{ env.PROJECT_NAME }}

      - name: Sync changes to Git branch [${{ env.PROJECT_REF }}]
        shell: bash
        run: |
          rm -rf ${{ env.PROJECT_NAME }}/docs \
            && mkdir -p ${{ env.PROJECT_NAME }}/docs \
            && cp -rf webdocs/build/* webdocs/build/.[^.]* ${{ env.PROJECT_NAME }}/docs
          cd ${{ env.PROJECT_NAME }}
          git add .
          git diff-index --quiet HEAD || git commit -am "Deploy ${{ needs.context.outputs.ciMsg }} documentation"
          git push -u origin ${{ env.PROJECT_REF }}
