name: Project Context

on:
  workflow_call:
    inputs:
      profile:
        description: 'Project profile'
        type: string
        required: true
      versionFile:
        description: 'Version pattern'
        required: false
        type: string
        default: 'gradle.properties'
      gitTagPrefix:
        description: 'Git Tag prefix'
        required: false
        type: string
        default: 'v'
      skipBranchPattern:
        description: 'Skip CI process if the given branch pattern matches the current branch'
        required: false
        type: string
      docRef:
        description: 'Default git branch for documentation'
        required: false
        type: string
        default: 'docs/main'
    secrets:
      githubToken:
        description: 'GitHub Token'
        required: true
      gpgKey:
        description: 'GPG private key'
        required: true
      gpgPassphrase:
        description: 'GPG passphrase'
        required: true
      gpgFingerprint:
        description: 'GPG subkey fingerprint'
        required: false
    outputs:
      branch:
        description: Branch or tag name
        value: ${{ jobs.context.outputs.branch }}
      shouldBuild:
        description: Should build
        value: ${{ jobs.context.outputs.shouldBuild }}
      shouldPublish:
        description: Should publish
        value: ${{ jobs.context.outputs.shouldPublish }}
      isRelease:
        description: Is release
        value: ${{ jobs.context.outputs.isRelease }}
      commitId:
        description: Git short commit id
        value: ${{ jobs.context.outputs.commitId }}
      sha:
        description: Git SHA commit id
        value: ${{ jobs.context.outputs.sha }}
      version:
        description: Project version
        value: ${{ jobs.context.outputs.version }}
      semanticVersion:
        description: Semantic version
        value: ${{ jobs.context.outputs.semanticVersion }}
      docBranch:
        description: Documentation branch
        value: ${{ jobs.context.outputs.docBranch }}
      docVersion:
        description: Documentation version
        value: ${{ jobs.context.outputs.docVersion }}
      docCommitMsg:
        description: Documentation CI commit message
        value: ${{ jobs.context.outputs.docCommitMsg }}

jobs:
  context:
    name: Project Context
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.githubToken }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: false
          gpg_private_key: ${{ secrets.gpgKey }}
          passphrase: ${{ secrets.gpgPassphrase }}
          fingerprint: ${{ secrets.gpgFingerprint }}

      - name: Project context
        id: context
        uses: zero88/gh-project-context@v2
        with:
          token: ${{ secrets.githubToken }}
          patterns: ${{ inputs.versionFile }}
          tagPrefix: ${{ inputs.gitTagPrefix }}
          hotfixPrefix: '${{ inputs.profile }}/hotfix/'
          releaseBranchPrefix: '${{ inputs.profile }}/release/'
          mergedReleaseMsgRegex: '^Merge pull request #[0-9]+ from .+/${{ inputs.profile }}/release/.+$'
          correctVerMsg: 'Correct ${{ inputs.profile }} version'
          releaseVerMsg: 'Release ${{ inputs.profile }} version'
          nextVerMsg: 'Next ${{ inputs.profile }} version'
          mustSign: true
          changelog: true
          nextVerMode: MINOR

      - name: Find semantic version
        id: semantic
        shell: bash
        run: |
          if [[ "${{ steps.context.outputs.onRelease }}" == "true" ]] || [[ ! -f gradle.properties ]]; then
            echo semanticVersion="" >> $GITHUB_OUTPUT
          else
            echo semanticVersion=$(grep semanticVersion gradle.properties | cut -d'=' -f2) >> $GITHUB_OUTPUT
          fi

      - name: Verify if branch is in ignore list
        id: verify
        shell: bash
        run: |
          if [[ ! -z "${{ inputs.skipBranchPattern }}" && "${{ steps.context.outputs.branch }}" =~ '${{ inputs.skipBranchPattern }}' ]]; then
            echo shouldBuild=false >> $GITHUB_OUTPUT
            echo shouldPublish=false >> $GITHUB_OUTPUT
          else
            echo shouldBuild=${{ steps.context.outputs.decision_build }} >> $GITHUB_OUTPUT
            echo shouldPublish=${{ steps.context.outputs.decision_publish }} >> $GITHUB_OUTPUT
          fi

      - name: Evaluate doc context
        id: docContext
        shell: bash
        run: |
          if [[ '${{ steps.context.outputs.onRelease }}' == 'true' ]]; then
            docBranch="docs/${{ inputs.profile }}/v${{ steps.context.outputs.version }}"
            docVersion="${{ steps.context.outputs.version }}"
            git fetch
            git checkout $(git show-ref --verify --quiet refs/heads/$docBranch || echo '-b') $docBranch
            git push -u origin $docBranch
          else
            docBranch="${{ inputs.docRef }}"
            docVersion="${{ steps.context.outputs.defaultBranch }}"
          fi
          
          commitVersion="$docVersion-${{ steps.context.outputs.commitShortId }}"
          echo docBranch=$docBranch >> $GITHUB_OUTPUT
          echo docVersion=$docVersion >> $GITHUB_OUTPUT
          echo docCommitMsg="${{ inputs.profile }} documentation [$commitVersion]" >> $GITHUB_OUTPUT

    outputs:
      branch: ${{ steps.context.outputs.branch }}
      isRelease: ${{ steps.context.outputs.onRelease }}
      commitId: ${{ steps.context.outputs.commitShortId }}
      sha: ${{ steps.context.outputs.commitId }}
      version: ${{ steps.context.outputs.version }}
      semanticVersion: ${{ steps.semantic.outputs.semanticVersion }}
      shouldBuild: ${{ steps.verify.outputs.shouldBuild }}
      shouldPublish: ${{ steps.verify.outputs.shouldPublish }}
      docBranch: ${{ steps.docContext.outputs.docBranch }}
      docVersion: ${{ steps.docContext.outputs.docVersion }}
      docCommitMsg: ${{ steps.docContext.outputs.docCommitMsg }}
